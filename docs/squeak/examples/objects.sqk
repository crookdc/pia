# Objects in Squeak are realized using a very simple prototype-based implementation. There are only a handful of key
# operations you need to know to get started with objects in Squeak, all of which are demoed in this script.

# First off we want to create a new object from 'nothing'. That is, without cloning an already existing object. This is
# done using the object literal expression. You may recognize the syntax as it is heavily inspired by JavaScript.
var developer = Object {
    name: "crookdc",
    age: 27,
    location: Object {
        country: "Sweden",
        type: "Coastal"
    }
};

# To access properties on objects and nested objects you define the part to the property in terms of a list of
# identifiers joined together with full-stop characters.
print(developer.name);
print(developer.location.country);

# You check for the presence of a property on an object by using it as the expression in an if statement. However, you
# should only check for the presence of one property at a time! If you try to invoke a property getter on a nil value
# then an error occurs.
if (developer.name) {
    print("The developer has a name");
}
if (developer.partner) {
    print("The developer has a partner");
} else {
    print("The developer is alone");
}

# It is entirely possible to change the structure of an object after it has been created. You can define new properties
# or reassign the values of existing properties as such:
developer.partner = Object {
    name: "Jane Doe",
    age: 29
};
developer.name = "John Doe";
print(developer.name + " <3 " + developer.partner.name);

# It is also possible to define behaviours on objects, these are called methods. A method is similar to a function but
# it does not have access to the environment it was defined in (it does not work with closures), instead it has only
# access to the global environment and a special type of closure which captures the target object.
developer.greet = function(other) {
    print(this.name + " says hi to " + other);
};
developer.greet("Jane Doe");

# Since Squeak uses a prototype based object model, you can create subobjects by cloning (extending) an existing object,
# which then serves as the prototype for the new object.
var crookdc = clone(developer);
crookdc.name = "crookdc";
crookdc.greet("Jane Doe");

if developer.name != "John Doe" {
    panic("Expected name to be John Doe");
}